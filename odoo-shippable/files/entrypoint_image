#!/usr/bin/env python

from __future__ import print_function

import os
import subprocess
import time


def docker_entrypoint():
    # Fix postgresql
    #  https://github.com/docker/docker/issues/783
    #   issuecomment-56013588
    cmds = [
        ["mkdir", "-p", "/etc/ssl/private-copy"],
        ["mkdir", "-p", "/etc/ssl/private"],
        ["mv", "/etc/ssl/private/*", "/etc/ssl/private-copy/"],
        ["rm", "-r", "/etc/ssl/private"],
        ["mv", "/etc/ssl/private-copy", "/etc/ssl/private"],
        ["chmod", "-R", "0700", "/etc/ssl/private"],
        ["chown", "-R", "postgres", "/etc/ssl/private"],
    ]
    for cmd in cmds:
        subprocess.call(' '.join(cmd), shell=True)

    # Patch to force start odoo as root
    cmd = """sed -i "s/== 'root'/== 'force_root'/g" %s/*/openerp/cli/server.py""" % os.getenv("HOME")
    subprocess.call(cmd, shell=True)


    # Seds for XMLRunner and Coverage compatibility
    print("Setting up XMLRunner & Coverage")
    module_py = '%s/*/openerp/modules/module.py' % os.getenv("HOME")
    server_py = '%s/*/openerp/service/server.py' % os.getenv("HOME")
    xml_sed = """sed -i "s/unittest.TextTestRunner(/XMLTestRunner(output=TEST_RESULTS,/g" %s"""
    imports = [
        'import unittest',
        'from xmlrunner import XMLTestRunner',
        'import coverage',
        'TEST_RESULTS = "/_results"',
    ]
    test_sed = "sed -i 's|import unittest|" + '\\n'.join(imports) + "|g' "
    subprocess.call(cmd + module_py, shell=True)
    subprocess.call(cmd + server_py, shell=True)

    cmd = xml_sed % module_py
    subprocess.call(cmd, shell=True)

    cmd = xml_sed % server_py
    subprocess.call(cmd, shell=True)

    # Start ssh service
    if os.environ.get('START_SSH', False):
        cmd = "/etc/init.d/ssh start"
        subprocess.call(cmd, shell=True)

    # Start postgresql service
    psql_version = os.environ.get('PSQL_VERSION', '9.3')
    psql_vstr = psql_version.replace('.', '')
    cmd = '/etc/init.d/postgresql start {version} main{psql_version}'.format(version=psql_version, psql_version=psql_vstr)
    subprocess.call(cmd, shell=True)
    print("Waiting to start psql service...")
    count = 0
    max_count = 40
    while True:
        psql_subprocess = subprocess.Popen(
            ["psql", '-l'], stdout=subprocess.PIPE,
            stderr=subprocess.PIPE)
        psql_subprocess.wait()
        if not bool(psql_subprocess.stderr.read()) or count > max_count:
            break
        time.sleep(2)
        count += 1
    print("...psql service started.")

    # Delete coveralls
    travis_build_dir = os.environ.get('TRAVIS_BUILD_DIR', '')
    fname_coveralls = os.path.join(travis_build_dir, '.coveralls.yml')
    if os.path.isfile(fname_coveralls):
        os.unlink(fname_coveralls)

    return True


if __name__ == '__main__':
    docker_entrypoint()
